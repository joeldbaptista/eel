bsearch(a, v, n) 
{
    /* Binary search */
    let l=1, m, h=n;

    /* lambda */
    const floor=(r) { return r - r%1; };

    while (l <= h) {
        m = floor(l + (h-l)/2);
        if (a[m] > v) h = m - 1;
        else if (a[m] < v) l = m + 1;
        else return m;
    }
    return -1; // not found
}

bsearchex(n, N)
{
    /* Make an array with squares from 0 to n (exclusive) */
    let a[n];
    for (let k=0; k < n; ++k) 
        a[k] = k**2;
    return bsearch(a, N, n);
}

main() 
{
    let q = bsearchex(100, 64**2);
    let qq = bsearchex(100, 1000); // not a square; will be -1

    print("bsearchex(100, 64**2) = %s", q);
    print("bsearchex(100, 1000) = %s", qq);
}
